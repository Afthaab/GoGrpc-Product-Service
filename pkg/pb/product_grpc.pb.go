// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/pb/product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagementClient is the client API for ProductManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagementClient interface {
	AddSizeBazedPrize(ctx context.Context, in *AddSizeBazedPrizeRequest, opts ...grpc.CallOption) (*AddSizeBazedPrizeResponse, error)
	ViewSizeBasedPrize(ctx context.Context, in *ViewSizeBasedPriceRequest, opts ...grpc.CallOption) (*ViewSizeBasedPriceRespose, error)
	EditSizeBasedPrize(ctx context.Context, in *EditSizeBasedPrizeRequest, opts ...grpc.CallOption) (*EditSizeBasedPrizeResponse, error)
	DeleteSizeBasedPrize(ctx context.Context, in *DeleteSizeBasedPrizeRequest, opts ...grpc.CallOption) (*DeleteSizeBasedPrizeResponse, error)
	AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error)
	AddCategories(ctx context.Context, in *AddCategoriesRequest, opts ...grpc.CallOption) (*AddCategoriesResponse, error)
	ViewCategories(ctx context.Context, in *ViewCategoriesRequest, opts ...grpc.CallOption) (*ViewCategoriesResponse, error)
	ViewCategoryById(ctx context.Context, in *ViewCategoryByIdRequest, opts ...grpc.CallOption) (*ViewCategoryByIdResponse, error)
	EditCategory(ctx context.Context, in *EditCategoryRequest, opts ...grpc.CallOption) (*EditCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequets, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	ViewProduct(ctx context.Context, in *ViewProductRequest, opts ...grpc.CallOption) (*ViewProductResponse, error)
	ViewProductById(ctx context.Context, in *ViewProductByIdRequest, opts ...grpc.CallOption) (*ViewProductByIdResponse, error)
	AddFoodType(ctx context.Context, in *AddFoodTypeRequest, opts ...grpc.CallOption) (*AddFoodTypeResponse, error)
	ViewFoodType(ctx context.Context, in *ViewFoodtypeRequest, opts ...grpc.CallOption) (*ViewFoodTypeResponse, error)
	EditFoodType(ctx context.Context, in *EditFoodTypeRequest, opts ...grpc.CallOption) (*EditFoodTypeResponse, error)
	DeleteFoodType(ctx context.Context, in *DeleteFoodTypeRequest, opts ...grpc.CallOption) (*DeleteFoodTypeResponse, error)
}

type productManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagementClient(cc grpc.ClientConnInterface) ProductManagementClient {
	return &productManagementClient{cc}
}

func (c *productManagementClient) AddSizeBazedPrize(ctx context.Context, in *AddSizeBazedPrizeRequest, opts ...grpc.CallOption) (*AddSizeBazedPrizeResponse, error) {
	out := new(AddSizeBazedPrizeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/AddSizeBazedPrize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewSizeBasedPrize(ctx context.Context, in *ViewSizeBasedPriceRequest, opts ...grpc.CallOption) (*ViewSizeBasedPriceRespose, error) {
	out := new(ViewSizeBasedPriceRespose)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewSizeBasedPrize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) EditSizeBasedPrize(ctx context.Context, in *EditSizeBasedPrizeRequest, opts ...grpc.CallOption) (*EditSizeBasedPrizeResponse, error) {
	out := new(EditSizeBasedPrizeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/EditSizeBasedPrize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) DeleteSizeBasedPrize(ctx context.Context, in *DeleteSizeBasedPrizeRequest, opts ...grpc.CallOption) (*DeleteSizeBasedPrizeResponse, error) {
	out := new(DeleteSizeBasedPrizeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/DeleteSizeBasedPrize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error) {
	out := new(AddImageResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/AddImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) AddCategories(ctx context.Context, in *AddCategoriesRequest, opts ...grpc.CallOption) (*AddCategoriesResponse, error) {
	out := new(AddCategoriesResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/AddCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewCategories(ctx context.Context, in *ViewCategoriesRequest, opts ...grpc.CallOption) (*ViewCategoriesResponse, error) {
	out := new(ViewCategoriesResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewCategoryById(ctx context.Context, in *ViewCategoryByIdRequest, opts ...grpc.CallOption) (*ViewCategoryByIdResponse, error) {
	out := new(ViewCategoryByIdResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) EditCategory(ctx context.Context, in *EditCategoryRequest, opts ...grpc.CallOption) (*EditCategoryResponse, error) {
	out := new(EditCategoryResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/EditCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequets, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewProduct(ctx context.Context, in *ViewProductRequest, opts ...grpc.CallOption) (*ViewProductResponse, error) {
	out := new(ViewProductResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewProductById(ctx context.Context, in *ViewProductByIdRequest, opts ...grpc.CallOption) (*ViewProductByIdResponse, error) {
	out := new(ViewProductByIdResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) AddFoodType(ctx context.Context, in *AddFoodTypeRequest, opts ...grpc.CallOption) (*AddFoodTypeResponse, error) {
	out := new(AddFoodTypeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/AddFoodType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) ViewFoodType(ctx context.Context, in *ViewFoodtypeRequest, opts ...grpc.CallOption) (*ViewFoodTypeResponse, error) {
	out := new(ViewFoodTypeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/ViewFoodType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) EditFoodType(ctx context.Context, in *EditFoodTypeRequest, opts ...grpc.CallOption) (*EditFoodTypeResponse, error) {
	out := new(EditFoodTypeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/EditFoodType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) DeleteFoodType(ctx context.Context, in *DeleteFoodTypeRequest, opts ...grpc.CallOption) (*DeleteFoodTypeResponse, error) {
	out := new(DeleteFoodTypeResponse)
	err := c.cc.Invoke(ctx, "/products.ProductManagement/DeleteFoodType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManagementServer is the server API for ProductManagement service.
// All implementations must embed UnimplementedProductManagementServer
// for forward compatibility
type ProductManagementServer interface {
	AddSizeBazedPrize(context.Context, *AddSizeBazedPrizeRequest) (*AddSizeBazedPrizeResponse, error)
	ViewSizeBasedPrize(context.Context, *ViewSizeBasedPriceRequest) (*ViewSizeBasedPriceRespose, error)
	EditSizeBasedPrize(context.Context, *EditSizeBasedPrizeRequest) (*EditSizeBasedPrizeResponse, error)
	DeleteSizeBasedPrize(context.Context, *DeleteSizeBasedPrizeRequest) (*DeleteSizeBasedPrizeResponse, error)
	AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error)
	AddCategories(context.Context, *AddCategoriesRequest) (*AddCategoriesResponse, error)
	ViewCategories(context.Context, *ViewCategoriesRequest) (*ViewCategoriesResponse, error)
	ViewCategoryById(context.Context, *ViewCategoryByIdRequest) (*ViewCategoryByIdResponse, error)
	EditCategory(context.Context, *EditCategoryRequest) (*EditCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequets) (*DeleteCategoryResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	ViewProduct(context.Context, *ViewProductRequest) (*ViewProductResponse, error)
	ViewProductById(context.Context, *ViewProductByIdRequest) (*ViewProductByIdResponse, error)
	AddFoodType(context.Context, *AddFoodTypeRequest) (*AddFoodTypeResponse, error)
	ViewFoodType(context.Context, *ViewFoodtypeRequest) (*ViewFoodTypeResponse, error)
	EditFoodType(context.Context, *EditFoodTypeRequest) (*EditFoodTypeResponse, error)
	DeleteFoodType(context.Context, *DeleteFoodTypeRequest) (*DeleteFoodTypeResponse, error)
	mustEmbedUnimplementedProductManagementServer()
}

// UnimplementedProductManagementServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagementServer struct {
}

func (UnimplementedProductManagementServer) AddSizeBazedPrize(context.Context, *AddSizeBazedPrizeRequest) (*AddSizeBazedPrizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSizeBazedPrize not implemented")
}
func (UnimplementedProductManagementServer) ViewSizeBasedPrize(context.Context, *ViewSizeBasedPriceRequest) (*ViewSizeBasedPriceRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewSizeBasedPrize not implemented")
}
func (UnimplementedProductManagementServer) EditSizeBasedPrize(context.Context, *EditSizeBasedPrizeRequest) (*EditSizeBasedPrizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSizeBasedPrize not implemented")
}
func (UnimplementedProductManagementServer) DeleteSizeBasedPrize(context.Context, *DeleteSizeBasedPrizeRequest) (*DeleteSizeBasedPrizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSizeBasedPrize not implemented")
}
func (UnimplementedProductManagementServer) AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedProductManagementServer) AddCategories(context.Context, *AddCategoriesRequest) (*AddCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategories not implemented")
}
func (UnimplementedProductManagementServer) ViewCategories(context.Context, *ViewCategoriesRequest) (*ViewCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCategories not implemented")
}
func (UnimplementedProductManagementServer) ViewCategoryById(context.Context, *ViewCategoryByIdRequest) (*ViewCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCategoryById not implemented")
}
func (UnimplementedProductManagementServer) EditCategory(context.Context, *EditCategoryRequest) (*EditCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategory not implemented")
}
func (UnimplementedProductManagementServer) DeleteCategory(context.Context, *DeleteCategoryRequets) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductManagementServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductManagementServer) ViewProduct(context.Context, *ViewProductRequest) (*ViewProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProduct not implemented")
}
func (UnimplementedProductManagementServer) ViewProductById(context.Context, *ViewProductByIdRequest) (*ViewProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProductById not implemented")
}
func (UnimplementedProductManagementServer) AddFoodType(context.Context, *AddFoodTypeRequest) (*AddFoodTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFoodType not implemented")
}
func (UnimplementedProductManagementServer) ViewFoodType(context.Context, *ViewFoodtypeRequest) (*ViewFoodTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFoodType not implemented")
}
func (UnimplementedProductManagementServer) EditFoodType(context.Context, *EditFoodTypeRequest) (*EditFoodTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFoodType not implemented")
}
func (UnimplementedProductManagementServer) DeleteFoodType(context.Context, *DeleteFoodTypeRequest) (*DeleteFoodTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFoodType not implemented")
}
func (UnimplementedProductManagementServer) mustEmbedUnimplementedProductManagementServer() {}

// UnsafeProductManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagementServer will
// result in compilation errors.
type UnsafeProductManagementServer interface {
	mustEmbedUnimplementedProductManagementServer()
}

func RegisterProductManagementServer(s grpc.ServiceRegistrar, srv ProductManagementServer) {
	s.RegisterService(&ProductManagement_ServiceDesc, srv)
}

func _ProductManagement_AddSizeBazedPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSizeBazedPrizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddSizeBazedPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/AddSizeBazedPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddSizeBazedPrize(ctx, req.(*AddSizeBazedPrizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewSizeBasedPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewSizeBasedPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewSizeBasedPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewSizeBasedPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewSizeBasedPrize(ctx, req.(*ViewSizeBasedPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_EditSizeBasedPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSizeBasedPrizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).EditSizeBasedPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/EditSizeBasedPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).EditSizeBasedPrize(ctx, req.(*EditSizeBasedPrizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_DeleteSizeBasedPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSizeBasedPrizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).DeleteSizeBasedPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/DeleteSizeBasedPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).DeleteSizeBasedPrize(ctx, req.(*DeleteSizeBasedPrizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/AddImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddImage(ctx, req.(*AddImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_AddCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/AddCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddCategories(ctx, req.(*AddCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewCategories(ctx, req.(*ViewCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewCategoryById(ctx, req.(*ViewCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_EditCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).EditCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/EditCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).EditCategory(ctx, req.(*EditCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).DeleteCategory(ctx, req.(*DeleteCategoryRequets))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewProduct(ctx, req.(*ViewProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewProductById(ctx, req.(*ViewProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_AddFoodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFoodTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddFoodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/AddFoodType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddFoodType(ctx, req.(*AddFoodTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_ViewFoodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewFoodtypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).ViewFoodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/ViewFoodType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).ViewFoodType(ctx, req.(*ViewFoodtypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_EditFoodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditFoodTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).EditFoodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/EditFoodType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).EditFoodType(ctx, req.(*EditFoodTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_DeleteFoodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).DeleteFoodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductManagement/DeleteFoodType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).DeleteFoodType(ctx, req.(*DeleteFoodTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManagement_ServiceDesc is the grpc.ServiceDesc for ProductManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.ProductManagement",
	HandlerType: (*ProductManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSizeBazedPrize",
			Handler:    _ProductManagement_AddSizeBazedPrize_Handler,
		},
		{
			MethodName: "ViewSizeBasedPrize",
			Handler:    _ProductManagement_ViewSizeBasedPrize_Handler,
		},
		{
			MethodName: "EditSizeBasedPrize",
			Handler:    _ProductManagement_EditSizeBasedPrize_Handler,
		},
		{
			MethodName: "DeleteSizeBasedPrize",
			Handler:    _ProductManagement_DeleteSizeBasedPrize_Handler,
		},
		{
			MethodName: "AddImage",
			Handler:    _ProductManagement_AddImage_Handler,
		},
		{
			MethodName: "AddCategories",
			Handler:    _ProductManagement_AddCategories_Handler,
		},
		{
			MethodName: "ViewCategories",
			Handler:    _ProductManagement_ViewCategories_Handler,
		},
		{
			MethodName: "ViewCategoryById",
			Handler:    _ProductManagement_ViewCategoryById_Handler,
		},
		{
			MethodName: "EditCategory",
			Handler:    _ProductManagement_EditCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductManagement_DeleteCategory_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ProductManagement_AddProduct_Handler,
		},
		{
			MethodName: "ViewProduct",
			Handler:    _ProductManagement_ViewProduct_Handler,
		},
		{
			MethodName: "ViewProductById",
			Handler:    _ProductManagement_ViewProductById_Handler,
		},
		{
			MethodName: "AddFoodType",
			Handler:    _ProductManagement_AddFoodType_Handler,
		},
		{
			MethodName: "ViewFoodType",
			Handler:    _ProductManagement_ViewFoodType_Handler,
		},
		{
			MethodName: "EditFoodType",
			Handler:    _ProductManagement_EditFoodType_Handler,
		},
		{
			MethodName: "DeleteFoodType",
			Handler:    _ProductManagement_DeleteFoodType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/product.proto",
}
